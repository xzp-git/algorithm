 package 二叉树;

public class Code05_MaxSubBSTSize {
	
	
	/**
	 * 
	 * 	二叉树 x 上 子树中最大二叉搜索树的节点数  有三种可能性
	 *	
	 *分析 子树中的最大二叉搜索树  有三种可能性
	 * x不做头的二叉搜索子树 有两种可能性
	 * 1）左树的 maxSubBSTSize 2）右树的maxSubBSTSize
	 * 
	 * x做头的二叉搜素子树 有一种可能性
	 * 1）左树是否是 BST 2）右树是否是BST 3）左树的max < x  4) x < 右树的min
	 * 5) 要想知道 size 左树是 BST 需要知道 size  右树是BST 需要知道 size 
	 * 	两者size 相加 再加 1 即是最后答案
	 * 
	 * 收集信息整理成合并后的公共信息
	 * 	1) maxSubBSTSize?
	 * 	2) BST?
	 *  3)  max
	 *	4)  min
	 *	5) size
	 *	其中 条件 2 可以被化简为条件1和条件5   1 == 5 
	 *	
	 * 
	 *  	
	 * 
	 * 
	 */
	
	
	
	
	public static class Node {
		public int value;
		public Node left;
		public Node right;

		public Node(int data) {
			this.value = data;
		}
	}
	
	
	
	public static class Info{
		public int maxSubBSTSize;
		public int max;
		public int min;
		public int allSize;
		
		public Info(int m, int ma, int mi, int a) {
			maxSubBSTSize = m;
			max = ma;
			min = mi;
			allSize = a;
		}
	}
	
	public static int maxDistance(Node head) {
		
	}
	
	public static Info process(Node x) {
		if(x == null) {
			return null;
		}
		
		Info leftInfo = process(x.left);
		Info rightInfo = process(x.right);
		
		int max = x.value;
		int min = x.value;
		int allSize = 1;
		int p1 = -1;
		int p2 = -1;
		int p3 = -1;
		
		
		if(leftInfo != null) {
			max = Math.max(max, leftInfo.max);
			min = Math.min(min, leftInfo.min);
			allSize += leftInfo.allSize;
		}
		if(rightInfo != null) {
			max = Math.max(max, rightInfo.max);
			min = Math.min(min, rightInfo.min);
			allSize += rightInfo.allSize;
		}
		
		
		
		int maxSubBSTSize;
		
		
		
		return new Info(maxSubBSTSize, max, min, allSize);
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
