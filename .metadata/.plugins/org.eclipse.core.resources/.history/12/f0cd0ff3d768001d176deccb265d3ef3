package 二叉树;

public class Code02_IsBST {
	
	/**
	 * 
	 * @author xzp03
	 * 判断是否是搜索二叉树
	 * 
	 * 搜索二叉树(x)的定义
	 * 	1.左子树是搜索二叉树   右子树是搜索二叉树
	 * 	2.左子树的最大值小于x  右子树的最小值大于x
	 * 
	 * 一、 分析
	 * 根据定义我需要
	 * 从左子树收取两个信息
	 * 	1. 是否是二叉搜索树
	 * 	2. 最大值
	 * 从右子树收取两个信息
	 * 	1. 是否是二叉搜索树
	 * 	2. 最小值
	 * 
	 * 
	 * 由于递归套路 需要要求对每一个树收取的信息都是一样的
	 * 
	 * 所以取公共的最大信息
	 * 
	 * 即
	 * 从左右子树都收取相同的信息
	 * 1. 是否是二叉搜索树
	 * 2. 最大值
	 * 3. 最小值
	 *
	 * 二、解题
	 * 1. 定义信息体
	 * 
	 * 2. 处理base case
	 *
	 */
	
	public static class Info {
		public boolean isBST;
		public int max;
		public int min;
		
		public Info(boolean i, int ma, int mi) {
			isBST = i;
			max = ma;
			min = mi;
		}
	}
	
	public static boolean isBST (Node head) {
		
		
		return true;
	}
	
	public static class Node {
		public int value;
		public Node left;
		public Node right;

		public Node(int data) {
			this.value = data;
		}
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println("test111");
	}

}
